#!/usr/bin/env bash
# set -e

usage() {
  echo "usage: senv [-e | -d] <file>"
}

options=()
arguments=()
for arg in "$@"; do
  if [ "${arg:0:1}" = "-" ]; then
    if [ "${arg:1:1}" = "-" ]; then
      options[${#options[*]}]="${arg:2}"
    else
      index=1
      while option="${arg:$index:1}"; do
        [ -n "$option" ] || break
        options[${#options[*]}]="$option"
        let index+=1
      done
    fi
  else
    arguments[${#arguments[*]}]="$arg"
  fi
done

unset encrypt decrypt file

for option in "${options[@]}"; do
  case "$option" in
  "e" | "encrypt" )
    encrypt="1"
    [ -t 0 ] && file=".env"
    ;;
  "d" | "decrypt" )
    decrypt="1"
    [ -t 0 ] && file=".senv"
    ;;
  * )
    echo "senv: invalid option: --$option" >&2
    usage >&2
    exit 1
    ;;
  esac
done

if [ -n "$arguments" ]; then
  file="$arguments"
fi
if [ -t 0 ]; then
  if [ -z "$file" ]; then
    usage >&2
    exit 1
  elif [ ! -e "$file" ]; then
    echo "senv: $file: No such file or directory" >&2
    exit 1
  elif [ ! -f "$file" ]; then
    echo "senv: $file: Is a directory" >&2
    exit 1
  fi
else
  if [ -z "$file" ]; then
    file="/dev/stdin"
  fi
fi

if [ -z "$SENV_KEY" ]; then
  SENV_KEY=$(ssh-add -l | head -n1 | awk -F ' ' '{print $3}')
fi

if [ ! -e "$SENV_KEY" ]; then
  echo "senv: $SENV_KEY: No such file or directory" >&2
  exit 1
fi

if [ -n "$encrypt" ]; then
  while read line; do
    echo "$line" | openssl rsautl -encrypt -inkey "$SENV_KEY" | openssl base64 -A;
    echo
  done < $file
  exit 0
elif [ -n "$decrypt" ]; then
  while read line; do
    echo "$line" | openssl base64 -A -d | openssl rsautl -decrypt -inkey "$SENV_KEY" 2>/dev/null
  done < $file
  exit 0
else
  usage >&2
  exit 1
fi
